# Precedence and associativity may not be modeled exactly right in regex and
# single productions.
regex ::=
    | space
    | regex regex
    | regex "|" regex
    | single repetition?

space if ignore_whitespace ::= Îµ
space if !ignore_whitespace ::= (\p{White_Space} | "#" .*?\n?)*

single ::=
    | space "(" space group space ")" regex
    | space "[" set_class space "]"
repetition ::=
    | uncounted_repetition
    | counted_repetition
# BUG?: No space before ungreedy "?".
uncounted_repetition ::= space ("?" | "*" | "+") "?"?
counted_repetition ::=
    | space "{" decimal space ("," decimal? space)? "}"
    | space "{" "," decimal space "}"
decimal ::= (space digit)+
digit ::= [0-9]

group ::=
    | "?P<" capture_name ">" regex
    | "?<" capture_name ">" regex
    | "?" flags
    | "?" flags? ":" regex
    | regex
capture_name ::= capture_char_first capture_char_rest*
capture_char_first ::= "_" | alphabetic
capture_char_rest ::= "_" | "." | "[" | "]" | alphanumeric
alphabetic ::= \p{Alphabetic}
alphanumeric ::= [\p{Nd} \p{Nl} \p{No}]
# Flags cannot be repeated.
flags ::= flag+ | flag* "-" flag+
flag ::= [imsUuRx]

set_class ::=
    | space "[:" "^"? ascii_class_name ":]"
    | space "[" set_class_open set_class* space "]"
    | space intersection
    | space difference
    | space symmetric_difference
    | space set_class_range
ascii_class_name ::=
    | "alnum" | "alpha" | "ascii" | "blank" | "cntrl" | "digit" | "graph"
    | "lower" | "print" | "punct" | "space" | "upper" | "word" | "xdigit"
set_class_open ::=
    | space set_class_negate? (literal_minus+ | literal_close_bracket)?
intersection ::= "&&"
difference ::= "--"
symmetric_difference ::= "~~"
set_class_negate ::= "^" space
literal_minus ::= "-" space
literal_close_bracket ::= "]" space
set_class_range ::= set_class_item space ("-" space set_class_item2)?
set_class_item ::=
    | "\\" escape
    | [^\\]
# BUG?: parse_set_class_range treats "- -" as intersection, but the caller
# parse_set_class treats it as literal dash then "-".
set_class_item2 ::=
    | "\\" escape
    | [^\\\]-]

set_class_range_intersection ::= "-" space "-"

escape if octal ::= [0-7]{1,3}
escape ::=
    | hex_escape
    | unicode_class
    | perl_class
    | meta_character
    # BUG?: Control characters can be superfluously escaped.
    | escapeable_character
    # Parse in order.
    | special_word_boundary
    | special_literal
# Must represent a valid Unicode codepoint and not a surrogate half
# (i.e., 0..=D7FF or E000..=10FFFF).
hex_escape ::=
    | [xuU] space "{" (space hex_digit)+ space "}"
    | "x" (space hex_digit){2}
    | "u" (space hex_digit){4}
    | "U" (space hex_digit){8}
hex_digit ::= [0-9 a-f A-F]
# Unicode classes are validated after parsing.
unicode_class ::=
    | [pP] space "{" space unicode_class_name "}"
    | [pP] space [^\\]
# Parse in order.
unicode_class ::=
    | ([^}] space)*? "!" space "=" space ([^}] space)*
    | ([^}] space)*? ":" space ([^}] space)*
    | ([^}] space)*? "=" space ([^}] space)*
    | ([^}] space)*
perl_class ::= [dswDSW]
meta_character ::=
    | "\\" | "." | "+" | "*" | "?" | "(" | ")" | "|" | "[" | "]"
    | "{" | "}" | "^" | "$" | "#" | "&" | "-" | "~"
escapeable_character ::=
    | [[:ascii:] -- [0-9 A-Z a-z < >] -- meta_character]
# BUG?: No space before "{".
special_word_boundary ::= "b{" special_word_boundary_kind space "}"
special_word_boundary_kind ::= (start_word | end_word) half_word?
start_word ::= space "s" space "t" space "a" space "r" space "t"
end_word ::= space "e" space "n" space "d"
half_word ::= space "-" space "h" space "a" space "l" space "f"
special_literal ::= [aftnrvAzbB<>]
